---
description: 
globs: 
alwaysApply: false
---
# SAD-2.3 (Revised): Server-Side Logic with Direct API Control

## 1. Purpose & Core Logic
(This remains the same. The server still orchestrates the **Action Task** and **Memory Task**.)  
The server receives a single structured request and performs two operations:  
- Executes the user-requested **Action Task** immediately.  
- Computes a background **Memory Summary** if triggered.  
Both are merged into a single streaming response.

---

## 2. Key Dependencies
- ❌ `langchain`: **Removed**  
- ✅ `openai`: Used for direct API communication with OpenAI's models.  
- ✅ `ai`: Used for streaming management (`OpenAIStream`, `StreamData`, `StreamingTextResponse`).

---

## 3. Implementation of `route.ts`

```typescript
// Filename: /app/api/chat/route.ts

import { OpenAIStream, StreamingTextResponse, StreamData } from 'ai';
import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources/chat';

import { PROMPTS, ActionType } from '../../../lib/prompts';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export const runtime = 'edge';

export async function POST(req: Request) {
  // 1. Parse the incoming body
  const body = await req.json();
  const { action, messagesForAction, fullTranscript, currentSummary } = body;

  // 2. Validate action type
  if (!action || !PROMPTS[action]) {
    return new Response(JSON.stringify({ error: 'Invalid action specified' }), { status: 400 });
  }

  // --- Task 2: Memory Summary Update (Background Logic First) ---
  const newSummary = await getUpdatedSummary(fullTranscript, currentSummary);
  console.log("✅ [SERVER] Final summary for this turn:", newSummary);

  // --- Task 1: Action Execution (Immediate) ---
  const systemPromptForAction = PROMPTS[action];

  const messages: ChatCompletionMessageParam[] = [
    { role: 'system', content: systemPromptForAction },
    ...messagesForAction,
  ];

  const response = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    stream: true,
    messages: messages,
    temperature: 0.7,
  });

  // 3. Stream back both the action output and the summary
  const data = new StreamData();
  data.append({ newSummary });

  const stream = OpenAIStream(response, {
    onFinal(completion) {
      data.close();
    },
  });

  return new StreamingTextResponse(stream, {}, data);
}


## 4. Summarization Helper Function


async function getUpdatedSummary(fullTranscript: string, currentSummary: string): Promise<string> {
  const MEMORY_BUFFER_SIZE = 6;
  const SUMMARIZE_TRIGGER_SIZE = 12;

  const turns = fullTranscript.split('\n').filter(Boolean);
  const totalTurnCount = turns.length;

  // If not enough turns, skip summarization
  if (totalTurnCount < SUMMARIZE_TRIGGER_SIZE) {
    return currentSummary;
  }

  const contentToSummarize = turns.slice(0, -MEMORY_BUFFER_SIZE).join('\n');

  const summarizationPrompt = `Concisely update the previous summary with the key information from the new conversation lines.
[PREVIOUS SUMMARY]
${currentSummary || "None."}
[NEW LINES TO INTEGRATE]
${contentToSummarize}
[NEW, UPDATED SUMMARY]`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: summarizationPrompt }],
    });
    return response.choices[0].message.content || currentSummary;
  } catch (error) {
    console.error("Summarization call failed:", error);
    return currentSummary;
  }
}


