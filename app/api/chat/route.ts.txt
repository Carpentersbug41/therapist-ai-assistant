import {
  StreamData,
  StreamingTextResponse,
  LangChainAdapter,
} from 'ai';
import { ChatOpenAI } from '@langchain/openai';
import { PromptTemplate } from '@langchain/core/prompts';
import { StringOutputParser } from '@langchain/core/output_parsers';
import { RunnableSequence } from '@langchain/core/runnables';
import { PROMPTS, ActionType } from '../../../lib/prompts';

export const runtime = 'edge';

const formatMessage = (message: { role: string; content: string }) => {
  return `${message.role}: ${message.content}`;
};

export async function POST(req: Request) {
  console.log("\n\n--- ✅ NEW REQUEST RECEIVED at /api/chat ✅ ---\n\n");
  const body = await req.json();

  // Log the exact payload received from the client
  console.log('--- Start of API Payload (Server-Side) ---');
  console.log(JSON.stringify(body, null, 2));
  console.log('--- End of API Payload (Server-Side) ---');
  
  const messages = body.messages ?? [];
  const lastMessage = messages[messages.length - 1];

  // Extract the custom data payload from the Vercel AI SDK message
  const action = lastMessage.data?.action as ActionType;
  const transcript = lastMessage.data?.transcript as string;

  // Validate the action
  if (!action || !PROMPTS[action]) {
    return new Response(JSON.stringify({ error: 'Invalid action specified' }), { status: 400 });
  }

  // Get the system prompt from our library
  const systemPrompt = PROMPTS[action];

  const model = new ChatOpenAI({
    temperature: 0.7,
    modelName: 'gpt-4o-mini',
  });

  const prompt = PromptTemplate.fromTemplate(
    `System Prompt: {system_prompt}
    
    Transcript:
    ---
    {transcript}
    ---
    
    Assistant's Response:`
  );

  const chain = RunnableSequence.from([
    prompt,
    model,
    new StringOutputParser(),
  ]);

  const stream = await chain.stream({
    system_prompt: systemPrompt,
    transcript: transcript,
  });

  // Use the LangChainAdapter to handle the stream and response
  const data = new StreamData();
  data.append({ 'text': 'some text' }); // Example of appending metadata
  
  const aiStream = LangChainAdapter.toAIStream(stream, {
    onFinal() {
      data.close();
    },
  });

  return new StreamingTextResponse(aiStream, {}, data);
}
